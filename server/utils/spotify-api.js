/**
 * Wrapper around the Spotify API end points to be conveniently used
 * throughout the server app as Promises.
 */
const env = require('./../../config/env');
const request = require('request-promise-native');

// TODO: Automatically token refreshes when the access_token expires.

/**
 * Create a new playlist for the user.
 *
 * @param  {String}  access_token
 * @param  {String}  user_id
 * @param  {String}  name
 * @return {Promise}
 */
var create_playlist = (access_token, user_id, name) => {
    let options = {
        url: `https://api.spotify.com/v1/users/${user_id}/playlists`,
        body: {
            name: `Gethr - ${name}`,
            public: true,
            collaborative: false,
            description: 'Playlist generated by Gethr.'
        },
        headers: {
            'Authorization': 'Bearer ' + access_token,
            'Content-Type': 'application/json'
        },
        json: true
    };

    return request.post(options);
};

/**
 * Get information about what the user is currently playing.
 *
 * @param  {String}  access_token
 * @return {Promise}
 */
var currently_playing = (access_token) => {
    let options = {
        url: 'https://api.spotify.com/v1/me/player/currently-playing',
        headers: { 'Authorization': 'Bearer ' + access_token },
        json: true
    };

    return request.get(options);
};

/**
 * Get the data for the currently authenticated user from the Spotify API.
 *
 * @param  {String}  access_token
 * @return {Promise}
 */
var me = (access_token) => {
    let options = {
        url: 'https://api.spotify.com/v1/me',
        headers: { 'Authorization': 'Bearer ' + access_token },
        json: true
    };

    return request.get(options);
};

/**
 * Fetch information about a playlist given its ID.
 *
 * @param  {String}  access_token
 * @param  {String}  playlist_id
 * @return {Promise}
 */
var playlist = (access_token, playlist_id) => {
    let options = {
        url: `https://api.spotify.com/v1/playlists/${playlist_id}`,
        headers: { 'Authorization': 'Bearer ' + access_token },
        json: true
    };

    return request.get(options);
};

/**
 * Get the current user's playlists.
 *
 * @param  {String}  access_token
 * @return {Promise}
 */
var playlists = (access_token) => {
    let options = {
        url: 'https://api.spotify.com/v1/me/playlists',
        headers: { 'Authorization': 'Bearer ' + access_token },
        json: true
    };

    return request.get(options);
};

/**
 * Get a new refresh token from the Spotify API.
 *
 * @param  {String}  refresh_token
 * @return {Promise}
 */
var refresh_token = (refresh_token) => {
    // @TODO Fix for Serverless ENV.
    let authOptions = {
        url: 'https://accounts.spotify.com/api/token',
        headers: { 'Authorization': 'Basic ' + (new Buffer(env.SPOTIFY_CLIENT_ID + ':' + env.SPOTIFY_SECRET).toString('base64')) },
        form: {
            grant_type: 'refresh_token',
            refresh_token: refresh_token
        },
        json: true
    };

    return request.post(authOptions);
};

/**
 * Get auth tokens from the Spotify API with the given authorization code.
 *
 * @param  {String}  code
 * @param  {String}  redirect_uri
 * @return {Promise}
 */
var token = (code, redirect_uri) => {
    // @TODO Fix for Serverless ENV.
    let authOptions = {
        url: 'https://accounts.spotify.com/api/token',
        form: {
            code: code,
            redirect_uri: redirect_uri,
            grant_type: 'authorization_code'
        },
        headers: {
            'Authorization': 'Basic ' + (new Buffer(env.SPOTIFY_CLIENT_ID + ':' + env.SPOTIFY_SECRET).toString('base64'))
        },
        json: true
    };

    return request.post(authOptions);
};

/**
 * Fetch information about a track given its ID.
 *
 * @param  {String}  access_token
 * @param  {String}  track_id
 * @return {Promise}
 */
var track = (access_token, track_id) => {
    let options = {
        url: `https://api.spotify.com/v1/tracks/${track_id}`,
        headers: { 'Authorization': 'Bearer ' + access_token },
        json: true
    };

    return request.get(options);
};

/**
 * Unfollow (delete) a playlist.
 *
 * @param  {String}  access_token
 * @param  {String}  playlist_id
 * @return {Promise}
 */
var unfollow_playlist = (access_token, playlist_id) => {
    let options = {
        url: `https://api.spotify.com/v1/playlists/${playlist_id}/followers`,
        headers: { 'Authorization': 'Bearer ' + access_token },
        json: true
    }

    return request.delete(options);
};

module.exports = {
    create_playlist,
    currently_playing,
    me,
    playlist,
    playlists,
    refresh_token,
    token,
    track,
    unfollow_playlist
};
